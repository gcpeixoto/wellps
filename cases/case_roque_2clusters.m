%% Case: roque_2clusters 
% Study of two clusters generated by new clsutering method (TEST)

%% Load UNISIM model
[G,PROPS] = buildModel('../benchmarks/unisim-I-D/eclipse/UNISIM_I_D_ECLIPSE_NO_TRAILING.DATA');

%% Inverse mapping
Ind = nan(prod(G.cartDims),1);
Ind(G.cells.indexMap) = 1:G.cells.num;

%% Read files

cvc1 = importdata('../csv/roque-2clusters/C1-1.csv');
cvc1 = cvc1.data;

cvc09 = importdata('../csv/roque-2clusters/C1-09.csv');
cvc09 = cvc09.data;

%% get indices
ind1 = sub2ind(G.cartDims,cvc1(:,1),cvc1(:,2),cvc1(:,3));
ind1 = Ind(ind1);

ind09 = sub2ind(G.cartDims,cvc09(:,1),cvc09(:,2),cvc09(:,3));
ind09 = Ind(ind09);

% all
I = [ind1;ind09];

figure
plotGrid(G, ind1,... 
    'FaceColor','r','EdgeColor','k')

figure
plotGrid(G, ind09,... 
    'FaceColor','g','EdgeColor','k')

icommon = find(ismember(cvc1,cvc09,'rows'));

figure
plotGrid(G, 1:G.cells.num,'FaceColor',[0.6,0.6,0.6], ...
    'FaceAlpha',0.3, 'EdgeColor',[0.6,0.6,0.6],'EdgeAlpha',0.3)

%% Find connections 

G1 = findConnectionsSimple(cvc1);
G2 = findConnectionsSimple(cvc09);

% preparing csv file
hdr = {'i,'; 'j,'; 'k'}'; % transposed!
hdr = sprintf('%s\t',hdr{:});

% significant cells
nofsc = 10;

% ==== group 1 has no comps above nofsc = 10.
% % group 1
% for ncomp = 1:G1.ncomp
%     if G1.compSizes(ncomp) >= nofsc
%         fname = strcat('../tmp/group1-comp-',num2str(ncomp),'.csv');        
%         dlmwrite(fname,hdr,'');       
%             
%         % append matrix 
%         cv = G1.compVoxelCoords{ncomp};
%         
%         dlmwrite(fname,cv,'-append');              
%         
%         ind = sub2ind(G.cartDims,cv(:,1),cv(:,2),cv(:,3));
%         ind = Ind(ind);
%         plotGrid(G,ind);
%         hold on    
%     end
% end



% group 2
for ncomp = 1:G2.ncomp
    if G2.compSizes(ncomp) >= nofsc
        fname = strcat('../tmp/group0.9-comp-',num2str(ncomp),'.csv');        
        dlmwrite(fname,hdr,'');       
            
        % append matrix 
        cv = G2.compVoxelCoords{ncomp};
        
        dlmwrite(fname,cv,'-append');              
        
        ind = sub2ind(G.cartDims,cv(:,1),cv(:,2),cv(:,3));
        ind = Ind(ind);
        
%         figure
%         nm = strcat('C',num2str(ncomp));
%         title(nm);
%         plotGrid(G,ind);
%         view(-19,33)
%         axis off vis3d tight
%         fn = strcat('../tmp/',nm,'.pdf');
%         print(fn,'-dpdf');
    end
end

%% Compute metrics


for ncomp = 1:G2.ncomp
    
    if G2.compSizes(ncomp) >= nofsc
        
        fprintf('\n\n\n')        
        disp(ncomp) 
        fprintf('\n\n\n')
        
        MadjComp = G2.compAdjMatrix{ncomp};
        edfile = saveAdjEdges(MadjComp);  
        ! ./../cpp/graphMetrics
        [nodeID,deg,clns,betw] = getMetricsData(edfile);  

        maxC = max(clns);           % max closeness = min farness
        iC = clns == maxC;          % network closer nodes
        iCnode = nodeID(iC);        % getting node id (there might be more than 1)

        compcv = G2.compVoxelCoords{ncomp};    
        ivC = compcv(iCnode,:);   % global voxel coordinates

        % store components whose volume is significant    
        G2M.degreeCentrality{ncomp} = deg;
        G2M.closenessCentrality{ncomp} = clns;
        G2M.betweenessCentrality{ncomp} = betw;                
        G2M.maxClosenessVoxelCoords{ncomp} = ivC(1,:);    
    end
      
end

%% list of max closeness logical indices

for i = 1:numel(G2M.maxClosenessVoxelCoords)
    fprintf('%d %d %d \n',G2M.maxClosenessVoxelCoords{i});
end

